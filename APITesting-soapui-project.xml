<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0260ead9-e2ea-4bf8-83d7-d44f89aab72a" activeEnvironment="Default" name="APITesting" resourceRoot="" soapui-version="5.6.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="1e4edfd5-6c73-4fa9-8aae-e8efca8cce2f" wsaVersion="NONE" name="ShoppingServiceSoapBinding" type="wsdl" bindingName="{http://expertz.me/service/eCommerce/ShoppingService/1.0}ShoppingServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="file:/C:/Users/SaritaKumari/Resources/ShoppingService.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\C:\Users\SaritaKumari\Resources\ShoppingService.wsdl"><con:part><con:url>file:\C:\Users\SaritaKumari\Resources\ShoppingService.wsdl</con:url><con:content><![CDATA[<definitions name="ShoppingService" targetNamespace="http://expertz.me/service/eCommerce/ShoppingService/1.0" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:sdt="http://expertz.me/data/eCommerce/ShoppingService/1.0" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ss="http://expertz.me/service/eCommerce/ShoppingService/1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <types>
    <xsd:schema>
      <xsd:import namespace="http://expertz.me/data/eCommerce/ShoppingService/1.0" schemaLocation="ShoppingService.xsd"/>
    </xsd:schema>
  </types>
  <message name="loginRequest">
    <part name="loginRequest" element="sdt:loginRequest"/>
  </message>
  <message name="loginResponse">
    <part name="sessionId" element="sdt:sessionId"/>
  </message>
  <message name="login_faultMsg">
    <part name="loginFault" element="sdt:faultMessage"/>
  </message>
  <message name="findRequest">
    <part name="findRequest" element="sdt:findRequest"/>
  </message>
  <message name="findResponse">
    <part name="findResponse" element="sdt:findResponse"/>
  </message>
  <message name="find_faultMsg">
    <part name="findFault" element="sdt:faultMessage"/>
  </message>
  <message name="purchaseRequest">
    <part name="purchaseRequest" element="sdt:purchaseRequest"/>
  </message>
  <message name="purchaseResponse">
    <part name="purchaseResponse" element="sdt:purchaseResponse"/>
  </message>
  <message name="purchase_faultMsg">
    <part name="purchaseFault" element="sdt:faultMessage"/>
  </message>
  <message name="logoutRequest">
    <part name="logoutRequest" element="sdt:logoutRequest"/>
  </message>
  <message name="logoutResponse">
    <part name="logoutResponse" element="sdt:logoutResponse"/>
  </message>
  <message name="logout_faultMsg">
    <part name="logoutFault" element="sdt:faultMessage"/>
  </message>
  <portType name="ShoppingServicePt">
    <operation name="login">
      <input message="ss:loginRequest"/>
      <output message="ss:loginResponse"/>
      <fault name="fault" message="ss:login_faultMsg"/>
    </operation>
    <operation name="logout">
      <input message="ss:logoutRequest"/>
      <output message="ss:logoutResponse"/>
      <fault name="fault" message="ss:logout_faultMsg"/>
    </operation>
    <operation name="find">
      <input message="ss:findRequest"/>
      <output message="ss:findResponse"/>
      <fault name="fault" message="ss:find_faultMsg"/>
    </operation>
    <operation name="purchase">
      <input message="ss:purchaseRequest"/>
      <output message="ss:purchaseResponse"/>
      <fault name="fault" message="ss:purchase_faultMsg"/>
    </operation>
  </portType>
  <binding name="ShoppingServiceSoapBinding" type="ss:ShoppingServicePt">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="login">
      <soap:operation soapAction="http://expertz.me/service/eCommerce/ShoppingService/1.0/login"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </fault>
    </operation>
    <operation name="logout">
      <soap:operation soapAction="http://expertz.me/service/eCommerce/ShoppingService/1.0/logout"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="find">
      <soap:operation soapAction="http://expertz.me/service/eCommerce/ShoppingService/1.0/find"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="purchase">
      <soap:operation soapAction="http://expertz.me/service/eCommerce/ShoppingService/1.0/purchase"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
  </binding>
  <service name="ShoppingService">
    <port name="ShoppingServicePort" binding="ss:ShoppingServiceSoapBinding">
      <soap:address location="http://localhost:8088/mockShoppingService"/>
    </port>
  </service>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\Users\SaritaKumari\Resources\ShoppingService.xsd</con:url><con:content><![CDATA[<xsd:schema targetNamespace="http://expertz.me/data/eCommerce/ShoppingService/1.0" elementFormDefault="qualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:smsg="http://expertz.me/data/eCommerce/ShoppingService/1.0">
  <xsd:element name="faultMessage" type="xsd:string"/>
  <xsd:complexType name="FaultMessage">
    <xsd:sequence>
      <xsd:element name="errorCode" type="xsd:string"/>
      <xsd:element name="errorDesc" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="sessionId" type="smsg:SessionId"/>
  <xsd:simpleType name="SessionId">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>
  <xsd:simpleType name="PurchaseItem">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>
  <xsd:element name="purchaseRequest">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="sessionId" type="smsg:SessionId"/>
        <xsd:element name="purchaseItem" type="smsg:PurchaseItem"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="loginRequest">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="username" type="xsd:string"/>
        <xsd:element name="password" type="xsd:string"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="logoutRequest">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="sessionId" type="smsg:SessionId"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="logoutResponse">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="logoutMessage" type="xsd:string"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="findRequest">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="sessionId" type="xsd:string"/>
        <xsd:element name="findString" type="xsd:string"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="findResponse">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="item" type="smsg:ItemType"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:complexType name="ItemType">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="description" type="xsd:string"/>
      <xsd:element name="price" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="purchaseResponse">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="purchaseStatus" type="smsg:PurchaseStatusType"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:complexType name="PurchaseStatusType">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="stockStatus" type="xsd:string"/>
      <xsd:element name="expectedDelivery" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8088/mockShoppingService</con:endpoint></con:endpoints><con:operation id="8795882d-5c3b-4c64-a282-80df43ae81ee" isOneWay="false" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/find" name="find" bindingOperationName="find" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="c7ce0dde-ea62-4826-8b2f-0a4d31e3dd67" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockShoppingService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <ns:findRequest>\r
         <ns:sessionId>?</ns:sessionId>\r
         <ns:findString>?</ns:findString>\r
      </ns:findRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/find"/></con:call></con:operation><con:operation id="1517fe49-d9b5-4781-b746-98ad74ff8b56" isOneWay="false" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/login" name="login" bindingOperationName="login" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="4abdd323-d43d-4ae5-95fb-ef39fe79a27d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockShoppingService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <ns:loginRequest>\r
         <ns:username>?</ns:username>\r
         <ns:password>?</ns:password>\r
      </ns:loginRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/login"/></con:call></con:operation><con:operation id="df55d6e7-7d86-43fc-bd38-c476834ecca2" isOneWay="false" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/logout" name="logout" bindingOperationName="logout" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="4bb0e57a-f847-480e-a8fd-80cab29d96b1" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockShoppingService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <ns:logoutRequest>\r
         <ns:sessionId>?</ns:sessionId>\r
      </ns:logoutRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/logout"/></con:call></con:operation><con:operation id="cae2b873-43a5-4390-bd6b-5c32a7e12d8a" isOneWay="false" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/purchase" name="purchase" bindingOperationName="purchase" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9dcea6b8-6af6-453e-9969-60e6de750451" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockShoppingService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <ns:purchaseRequest>\r
         <ns:sessionId>?</ns:sessionId>\r
         <ns:purchaseItem>?</ns:purchaseItem>\r
      </ns:purchaseRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/purchase"/></con:call></con:operation></con:interface><con:testSuite id="10b6a43f-f180-45a9-bc4e-20b2e54dcbb7" name="DataDriven"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="96ebd985-d2ce-49cd-b513-2e6ff1a0a2cb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Database" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Jdbc connection" id="f34f6e7a-5358-4dfc-b9b2-9db51d38371f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.mysql.jdbc.Driver</con:driver><con:connectionString>jdbc:mysql://localhost:3306/soupUIDBTesting?user=root&amp;password=Testing@1234</con:connectionString><con:query>select * from login;
</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="1e84a1c1-fd6f-47dd-8c89-2823a0a4a409"><con:settings/><con:config><script> import com.eviware.soapui.support.XmlHolder
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 
 Class.forName("com.mysql.jdbc.Driver")
 def countQuery= "select count(*)count from login;"
 def response=context.testCase.getTestStepByName("Jdbc connection").getPropertyValue("responseAsXml")
 def Holder= new XmlHolder(response)
 
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/soupUIDBTesting?user=root&amp;password=Testing@1234", "root", "Testing@1234");
 PreparedStatement psSelect = con.prepareStatement(countQuery);
 ResultSet rs = psSelect.executeQuery();
 rs.last()
 def countOfRows=rs.getInt("count")
 log.info "Number of records ind DB : $countOfRows"


 
 //def usename=Holder.getNodeValue("ResultSet//row//LOGIN.USERNAME")
 // def usename=Holder.getNodeValue("(//LOGIN.USERNAME)[2]")
 
 for(int i=1; i&lt;=countOfRows;i++)
 {
 def username=Holder.getNodeValue("(//LOGIN.USERNAME)[" +i+ "]")
 def password=Holder.getNodeValue("(//LOGIN.PASSWORD)[" +i+ "]")
 log.info username 
 log.info password
// def intvalue=i.toString()
 	def tc=testRunner.testCase.testSuite.project.testSuites["DataDriven"].testCases["Database"]
	tc.testSteps["Username pasword"].setPropertyValue("username",username)
	tc.testSteps["Username pasword"].setPropertyValue("password",password)
	//tc.testSteps["Username pasword"].setPropertyValue("int"+"$i",intvalue)
	//log.info "$i"
//def sessionId="//*:sessionId";
//def response2 = context.testCase.getTestStepByName('Call login service').getPropertyValue("response")

//def Holder1= new XmlHolder(response)

//def sessionid=Holder1.getNodeValue(sessionId)
//context.testCase.setPropertyValue("sessionid",sessionid)
 }
 
 
 </script></con:config></con:testStep><con:testStep type="properties" name="Username pasword" id="32a6348e-3079-4bdb-b4db-dcac3ec37569"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>username</con:name><con:value>Divya</con:value></con:property><con:property><con:name>password</con:name><con:value>Welcome23</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="Call login service" id="59d0deb6-af74-4278-87ed-b4135c0e8d77"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ShoppingServiceSoapBinding</con:interface><con:operation>login</con:operation><con:request name="Call login service" id="e0a799d9-2a43-483e-b0a0-0a048dd0af9f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://DESKTOP-RJAFHP1:8088/mockShoppingServiceSoapBinding</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <ns:loginRequest>\r
         <ns:username>${Username pasword#username}</ns:username>\r
         <ns:password>${Username pasword#password}</ns:password>\r
      </ns:loginRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1407e557-b15e-4afe-8b52-03b81a42fae7"/><con:assertion type="Schema Compliance" id="f704450c-6af0-43d9-a9d9-6760be467a72"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="da4b7eb9-8536-40b7-8e5d-c137fd2f0552"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Call logout service" id="72885394-bc7b-4181-a6df-796b3612d58c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ShoppingServiceSoapBinding</con:interface><con:operation>logout</con:operation><con:request name="Call logout service" id="836ebd64-27d7-4495-9479-092c793385f3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://DESKTOP-RJAFHP1:8088/mockShoppingServiceSoapBinding</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <ns:logoutRequest>\r
         <ns:sessionId>${Call login service#response#//*:sessionId}</ns:sessionId>\r
      </ns:logoutRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9f2b8eb0-a2ea-4479-9fb0-8506e39609b2"/><con:assertion type="Schema Compliance" id="a2890c25-64d1-4057-b4c5-5ba63aaf8bd5"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="8197da4e-d3e2-4ac2-bf96-03d1f6329b32"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sessionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:mockService port="8088" path="/mockShoppingService" host="chethan-PC" name="ShoppingServiceSoapBinding MockService" bindToHostOnly="false" docroot="" id="568babbe-0c0e-4ebc-8f3e-01732224edd9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockService@require-soap-action">false</con:setting></con:settings><con:mockOperation name="find" interface="ShoppingServiceSoapBinding" operation="find" id="f7525e2d-1a3a-4bf1-8137-c90fc0456145"><con:settings/><con:dispatchPath>// Util variables to access the xml data
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( mockRequest.requestContent )

// Get the session ID
def sessionid = holder.getNodeValue( "//*:sessionId" )

// check if its a valid session
if( !context.hasProperty( sessionid )){
	// If not a valid session ID, set the relevant fault message
	requestContext.faultCode = 'APP006'
	requestContext.faultShortDesc = 'Invalid Session'
	requestContext.faultCausedBy = 'Auth System'
	requestContext.faultDesc = 'Invalid Session ID. Session does not exist or has timed out.'
	return "Fault Find"
}

// Get the query string
def itemDesc = holder.getNodeValue( "//*:findString" )

// This is our item list. Feel free to add more items if you want...
def itemList = [ : ]
itemList["Android Tablet"] = [id:1, desc: "Android Tablet", price: "40 GBP" ,stockStatus: "100", expectedDelivery: "30-JUL-2012"]
itemList["iPad v1"] = [id:2, desc: "iPad v1", price: "540 GBP"  ,stockStatus: "50", expectedDelivery: "30-JUL-2012"]
itemList["iPad v2"] = [id:3, desc: "iPad v2", price: "800 GBP"  ,stockStatus: "10", expectedDelivery: "30-AUG-2012"]


//def itemList = context.getProperty("itemList")

// Check if we have an item with the same description as the search string
if(itemList.containsKey(itemDesc)){
	// Populate item details and send success message
	def item = itemList[itemDesc]
	requestContext.itemId = item.id
	requestContext.itemDescription = item.desc
	requestContext.itemPrice = item.price
	return "Successful Find"
}

// We couldn't find a particular item for the search. 
//In the demo we don't support generic queries. So send a fault message
requestContext.faultCode = 'APP007'
requestContext.faultShortDesc = 'Invalid Query'
requestContext.faultCausedBy = 'Search System'
requestContext.faultDesc = 'In the demo we do not support generic queries and we could not find any items with the given string!!!'
return "Fault Find"
</con:dispatchPath><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Successful Find" encoding="UTF-8" id="efae4a34-81cb-4ef8-b2ab-a59039e787ef" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:findResponse>
         <ns:item>
            <ns:id>${itemId}</ns:id>
            <ns:description>${itemDescription}</ns:description>
            <ns:price>${itemPrice}</ns:price>
         </ns:item>
      </ns:findResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/find"/></con:response><con:response name="Fault Find" encoding="UTF-8" id="2d80faf2-5373-443f-b92c-564e4426ca89" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Body>
    <soapenv:Fault>
      <faultcode>${faultCode}</faultcode>
      <faultstring xml:lang="en-US">${faultShortDesc}</faultstring>
      <!--Optional:-->
      <faultactor>${faultCausedBy}</faultactor>
      <!--Optional:-->
      <detail>
      ${faultDesc}
        <!--You may enter ANY elements at this point-->
      </detail>
    </soapenv:Fault>
  </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/find"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="login" interface="ShoppingServiceSoapBinding" operation="login" id="e5507f37-4949-4097-8d94-a4d24dcd771d"><con:settings/><con:dispatchPath>// Initialize Util classes to retrieve XML value
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( mockRequest.requestContent )

// Get the username and Password values provided
def username = holder.getNodeValue( "//*:username" )
def password = holder.getNodeValue( "//*:password" )

// validate by checking that the User is not already logged in
// Username is of required length and Password doesn't end with 123!!!
if( context.hasProperty( username )  || username.length() > 10 || username.length() &lt; 3 || password.endsWith( "123" )){
	// If user is already loggged in, set different fault codes compared to others
	if(context.hasProperty( username )){
		requestContext.faultCode = 'APP001'
		requestContext.faultShortDesc = 'Already Logged In'
		requestContext.faultCausedBy = 'Auth System'
		requestContext.faultDesc = 'User is already logged in. If you want to login as another user logout first'
	}
	else{
		// Set relevant error code and desc. For the demo, we will keep it simple
		requestContext.faultCode = 'APP002'
		requestContext.faultShortDesc = 'Invalid Login Credentials'
		requestContext.faultCausedBy = 'Auth System'
		requestContext.faultDesc = 'Invalid Login Credentials. Please try again.'
	}
	// Specify which response to send back
	return "Fault Login"	
}

// Seems like a valid request, so generate session ID
// Note that we don't do password verification in the demo
def sessionid = String.valueOf( Math.random() ).substring( 2 )

// Set the user name and session ID as valid sessions and logged in user in context
// This helps in looking up to see if the user is logged in or if this is a valid session ID
context.setProperty( username, sessionid )
context.setProperty( sessionid, username )

requestContext.sessionid = sessionid
return "Successful Login"
</con:dispatchPath><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:defaultResponse>Successful Login</con:defaultResponse><con:response name="Successful Login" encoding="UTF-8" id="75f66b21-d8fc-4b1a-b812-805b004c499b" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:sessionId>${sessionid}</ns:sessionId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/login"/></con:response><con:response name="Fault Login" encoding="UTF-8" id="4823148f-2779-4061-be95-effadbf97ddd" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">
  <soapenv:Body>
    <soapenv:Fault>
      <faultcode>${faultCode}</faultcode>
      <faultstring xml:lang="en-US">${faultShortDesc}</faultstring>
      <!--Optional:-->
      <faultactor>${faultCausedBy}</faultactor>
      <!--Optional:-->
      <detail>
        <ns:faultMessage>${faultDesc}</ns:faultMessage>
        <!--You may enter ANY elements at this point-->
      </detail>
    </soapenv:Fault>
  </soapenv:Body>
</soapenv:Envelope>
]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/login"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="logout" interface="ShoppingServiceSoapBinding" operation="logout" id="9fdc9630-96be-4b84-b164-8b052d7ac8b7"><con:settings/><con:dispatchPath>// Util variables to access the xml data
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( mockRequest.requestContent )

// Get the session ID
def sessionid = holder.getNodeValue( "//*:sessionId" )

// check if its a valid session
if( !context.hasProperty( sessionid )){
	// If not a valid session ID, set the relevant fault message
	requestContext.faultCode = 'APP003'
	requestContext.faultShortDesc = 'Invalid Session'
	requestContext.faultCausedBy = 'Auth System'
	requestContext.faultDesc = 'Invalid Session ID. Session does not exist or has timed out.'
	return "Fault Logout"
}

// logout from the system by removing the relevant context
context.removeProperty( context.getProperty( sessionid ))
context.removeProperty( sessionid )
requestContext.logoutMessage = "Successfully logged out of the system."

return "Successful Logout"
</con:dispatchPath><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Successful Logout" encoding="UTF-8" id="1cf5c387-ddf1-4d2f-89dd-cef67aa12615" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:logoutResponse>
         <ns:logoutMessage>${logoutMessage}</ns:logoutMessage>
      </ns:logoutResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/logout"/></con:response><con:response name="Fault Logout" encoding="UTF-8" id="f892fe86-1d81-4633-8734-beef7b4f7798" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Body>
    <soapenv:Fault>
      <faultcode>${faultCode}</faultcode>
      <faultstring xml:lang="en-US">${faultShortDesc}</faultstring>
      <!--Optional:-->
      <faultactor>${faultCausedBy}</faultactor>
      <!--Optional:-->
      <detail>
      ${faultDesc}
        <!--You may enter ANY elements at this point-->
      </detail>
    </soapenv:Fault>
  </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/logout"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="purchase" interface="ShoppingServiceSoapBinding" operation="purchase" id="5b2a250d-a698-4659-86f1-0b0dc99c08d7"><con:settings/><con:dispatchPath>// Util variables to access the xml data
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( mockRequest.requestContent )

// Get the session ID
def sessionid = holder.getNodeValue( "//*:sessionId" )

// check if its a valid session
if( !context.hasProperty( sessionid )){
	// If not a valid session ID, set the relevant fault message
	requestContext.faultCode = 'APP010'
	requestContext.faultShortDesc = 'Invalid Session'
	requestContext.faultCausedBy = 'Auth System'
	requestContext.faultDesc = 'Invalid Session ID. Session does not exist or has timed out.'
	return "Fault Find"
}

// Get the query string
def itemDesc = holder.getNodeValue( "//*:purchaseItem" )

// This is our item list. Feel free to add more items if you want...
def itemList = [ : ]
itemList["Android Tablet"] = [id:1, desc: "Android Tablet", price: "40 GBP" ,stockStatus: "100", expectedDelivery: "30-JUL-2012"]
itemList["iPad v1"] = [id:2, desc: "iPad v1", price: "540 GBP"  ,stockStatus: "50", expectedDelivery: "30-JUL-2012"]
itemList["iPad v2"] = [id:3, desc: "iPad v2", price: "800 GBP"  ,stockStatus: "10", expectedDelivery: "30-AUG-2012"]


//def itemList = context.getProperty("itemList")

// Check if we have an item with the same description as the search string
if(itemList.containsKey(itemDesc)){
	// Populate item details and send success message
	def item = itemList[itemDesc]
	requestContext.itemId = item.id
	requestContext.itemStockStatus = item.stockStatus
	requestContext.itemExpectedDelivery = item.expectedDelivery
	return "Successful Purchase"
}

// We couldn't find a particular item for the search. 
//In the demo we don't support generic queries. So send a fault message
requestContext.faultCode = 'APP011'
requestContext.faultShortDesc = 'Invalid Item'
requestContext.faultCausedBy = 'Purchase System'
requestContext.faultDesc = 'In the demo we do not support bulk buys or add to cart kind of operations. We could not find any items with the given name!!!'
return "Fault Purchase"
</con:dispatchPath><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Successful Purchase" encoding="UTF-8" id="7e6b4b1d-e927-40dd-a5a7-035f9b8d2497" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://expertz.me/data/eCommerce/ShoppingService/1.0">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:purchaseResponse>
         <ns:purchaseStatus>
            <ns:id>${itemId}</ns:id>
            <ns:stockStatus>${itemStockStatus}</ns:stockStatus>
            <ns:expectedDelivery>${itemExpectedDelivery}</ns:expectedDelivery>
         </ns:purchaseStatus>
      </ns:purchaseResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/purchase"/></con:response><con:response name="Fault Purchase" encoding="UTF-8" id="d9cf7136-1c12-4f0c-b39e-5cecd7e57cdf" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Body>
    <soapenv:Fault>
      <faultcode>${faultCode}</faultcode>
      <faultstring xml:lang="en-US">${faultShortDesc}</faultstring>
      <!--Optional:-->
      <faultactor>${faultCausedBy}</faultactor>
      <!--Optional:-->
      <detail>
      	${faultDesc}
        <!--You may enter ANY elements at this point-->
      </detail>
    </soapenv:Fault>
  </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://expertz.me/service/eCommerce/ShoppingService/1.0/purchase"/></con:response><con:dispatchConfig/></con:mockOperation><con:startScript>/*
def itemList = [ : ]
itemList["Android Tablet"] = [id:1, desc: "Android Tablet", price: "40 GBP" ]
itemList["iPad v1"] = [id:2, desc: "iPad v1", price: "540 GBP" ]
itemList["iPad v2"] = [id:3, desc: "iPad v2", price: "800 GBP" ]

context.setProperty("itemList", itemList)
*/</con:startScript><con:properties/></con:mockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>